;TestPortal
;CodecCycle
;TryCodec

[TestKit]

;;Inbound to the test Launchpad
;
;;Portal Telephone Numebr
;exten => TestPortal,1,NoOp(Inbound Test Portal CASES:${ARG1})
; same => n,Set(CASES=${ARG1})
; same => n,Ringing()
; same => n,Answer
; same => n,Wait(1)
;
;;Validate Caller
; same => n,NoOp(CALLERID(num) = ${CALLERID(num)})
; same => n,GotoIf($["${CALLERID(num)}" = "+16123066440"]?validCaller)}; David Cell
; same => n,GotoIf($["${CALLERID(num)}" = "+17632584535"]?validCaller)}; David Cell
; same => n,GotoIf($["${CALLERID(num)}" = "+17038526073"]?validCaller)}; Kristie Desk
; same => n,GotoIf($["${CALLERID(num)}" = "+16012590380"]?validCaller)}; Kristie Cell
; same => n,GotoIf($["${CALLERID(num)}" = "+17038526073"]?validCaller)}; Chris Desk
; same => n,GotoIf($["${CALLERID(num)}" = "+19192088695"]?validCaller)}; Chris Cell
; same => n,GotoIf($["${CALLERID(num)}" = "+17038879441"]?validCaller)}; Sanjay Cell
; same => n,GotoIf($["${CALLERID(num)}" = "+17038879441"]?validCaller)}; Sanjay Cell
; same => n,GotoIf($["${CALLERID(num)}" = "+33170737822"]?validCaller)}; Francoise Desk
; same => n,GotoIf($["${CALLERID(num)}" = "+33621765116"]?validCaller)}; Francoise Mobile
; same => n,GotoIf($["${CALLERID(num)}" = "+33685928708"]?validCaller)}; Francoise Mobile 2
; same => n,GotoIf($["2" = "1"]?validCaller)}
; same => n,Playback(beeperr)
; same => n,Playback(beeperr)
; same => n,Read(MyDigits,,0,n,,60)
; same => n,NoOp(Reciecved Mydigits = ${MyDIgits})
; same => n,GotoIf($["${MyDigits}" = "9459"]?validCaller)}
; same => n,Playback(beeperr)
; same => n,Playback(beeperr)
; same => n,hangup()
;
;;Select and Run Test
; same => n(validCaller),NoOp(Valid Caller)
; same => n,Playback(beep)
; same => n,Read(MyDigits,,0,n,,60)
; same => n,SayAlpha(${MyDigits})
; same => n,GoSub(${CASES},${MyDigits},1)
; same => n,hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Macro to make outbound call with a variety of SIP headers
exten =>TestOut,1,NoOp(TestOut ([${ARG1}],[${ARG2}],[${ARG3}],[${ARG4}],[${ARG5}],[${ARG6}],[${ARG7}]))
 same => n,Set(ARRAY(Title,To,From,Diversion,PAID,EBI,CODECS)=${ARG1},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6},${ARG7})
 same => n,NoOp(TestOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}],[${CODECS}]))

 ; Set Title
 same => n,Set(Title=${IF($[ "${Title}" = ""]?#:${Title})})
 same => n,Set(Title=${IF($[ "${Title}" = "#"]?ECN Test(${EXTEN}):${Title})})
 same => n,Set(Caller=${CALLERID(name)})
 same => n,set(CALLERID(name)=${Title}-${Caller})
 same => n,set(CALLERID(num)=${From})

 ; Set correct EBI source, default to LLD
 same => n,Set(EBI=${IF($[ "${EBI}" = ""]?LLD:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LLD]?USLocLvl-USLLET4EBI1:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LDO]?USLocLvl-AsteriskEBI1:${EBI})})

 ; Make Call
 same => n,NoOp(TestOut-PRE-Dial ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}],[${CODECS}]))
 same => n,Dial(PJSIP/${To}@${EBI},,b(Handlers^addHeaders^1(${Diversion},${PAID},,${CODECS})))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Various Test Routines
;exten => TryCodec,1,NoOp(TryCodec: ${ARG1} play sound: ${ARG2})
; same => n,Set(CODEC=${ARG1})
; same => n,Set(SOUND=${ARG2})
; same => n,Playback(custom/dave/trying)
; same => n,Playback(custom/dave/${CODEC})
; same => n,Set(PJSIP_MEDIA_OFFER(audio)=!all,${CODEC})
; same => n,Set(PJSIP_SEND_SESSION_REFRESH()=invite)
; same => n,Wait(1)
; same => n,Set(CMD=asterisk -rx "core show channel ${CHANNEL}")
; same => n,Set(PATTERN=perl -ne 'print $1 if /NativeFormats: \((.*)\)/')
; same => n,Set(OUT=${SHELL(${CMD} | ${PATTERN})})
; same => n,Playback(custom/dave/using)
; same => n,Playback(custom/dave/${OUT})
; same => n,Playback(${SOUND})
; same => n,Echo()
; same => n,Return()
;
;exten => CodecCycle,1,NoOp(Codec Cycle Test)
; same => n,Playback(custom/dave/codec-test)
; same => n,Set(MyEndpoint=${CHANNEL(endpoint)})
; same => n,Set(MyAllow=${PJSIP_ENDPOINT(${MyEndpoint},allow)})
; same => n,Set(MyAllow=${MyAllow:1:$[${LEN(${MyAllow})} - 2]})
; same => n,Set(MyCount=${FIELDQTY(MyAllow,|)})
; same => n(Start),Set(Counter=1)
; same => n(CLoop),Set(Temp=${CUT(MyAllow,|,${Counter})})
; same => n,GotoIf($["${MyCount}" < "${Counter}"]?Finish)}
; same => n,GoSub(TestKit,TryCodec,1(${Temp},custom/90Speed_DunDunDunV4))
; same => n,Wait(1)
; same => n,Set(Counter=$[${Counter} + 1])
; same => n,Goto(CodecCycle,CLoop)
; same => n(Finish),Goto(CodecCycle,Start)
;
;exten => Quick,1,NoOp(Quick:  [${ARG1}],[${ARG2}],[${ARG3}])
; same => n,Set(ValueOne=${ARG1})
; same => n,Set(ValueTwo=${ARG2})
; same => n,Set(ValueThree=${ARG3})
; same => n,Return()
