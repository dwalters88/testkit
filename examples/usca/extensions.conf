; extensions.conf - the Asterisk dial plan
;
[general]
static=yes
writeprotect=no
clearglobalvars=no

[globals]
INTERNAL_DIAL_OPT=,20

#include testkit/testkit.conf

; Dial-Users handles calls to internal extensions.
; Calls coming into this context may be *external* or *internal* in origin.
[Dial-Users]
exten = _+X.,1,Verbose(1, "Dial-User ${CALLERID(num)} dialed ${EXTEN}.")
 same = n,Set(LOCAL(ext)=${EXTEN})
 same = n,Set(LOCAL(dev)=${ARG1})
 same = n,Set(LOCAL(cntx)=${ARG2})
 same = n,Dial(${dev}${INTERNAL_DIAL_OPT})
 same = n,Goto(dialed-${DIALSTATUS},1)

exten = dialed-NOANSWER,1,NoOp(STATUS: NOANSWER)
 same = n,Return()

exten = dialed-BUSY,1,NoOp(STATUS: BUSY)
 same = n,Return()

exten = dialed-CHANUNAVAIL,1,NoOp(STATUS: CHANUNAVAIL)
 same = n,Return()

exten = _dialed-.,1,NoOp(Dialed other ${DIALSTATUS})
 same = n,Goto(dialed-NOANSWER,1)

[stdexten]
;
; Standard extension subroutine:
;   ${EXTEN} - Extension
;   ${ARG1} - Device(s) to ring
;   ${ARG2} - Optional context in Voicemail
;
; Note that the current version will drop through to the next priority in the
; case of their pressing '#'.  This gives more flexibility in what do to next:
; you can prompt for a new extension, or drop the call, or send them to a
; general delivery mailbox, or...
;
; The use of the LOCAL() function is purely for convenience.  Any variable
; initially declared as LOCAL() will disappear when the innermost Gosub context
; in which it was declared returns.  Note also that you can declare a LOCAL()
; variable on top of an existing variable, and its value will revert to its
; previous value (before being declared as LOCAL()) upon Return.
;
exten => _X.,50000(stdexten),NoOp(Start stdexten)
exten => _X.,n,Set(LOCAL(ext)=${EXTEN})
exten => _X.,n,Set(LOCAL(dev)=${ARG1})
exten => _X.,n,Set(LOCAL(cntx)=${ARG2})
;exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
exten => _X.,n,Dial(${dev},20)				; Ring the interface, 20 seconds maximum
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => _+X.,50000(stdexten),NoOp(Start stdexten)
exten => _+X.,n,Set(LOCAL(ext)=${EXTEN})
exten => _+X.,n,Set(LOCAL(dev)=${ARG1})
exten => _+X.,n,Set(LOCAL(cntx)=${ARG2})
;exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
exten => _+X.,n,Dial(${dev},20)				; Ring the interface, 20 seconds maximum
exten => _+X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)


exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,Return()			; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)		; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,Return()			; If they press #, return to start

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})			; If they press *, send the user into VoicemailMain
exten => a,n,Return()

[stdPrivacyexten]
;
; Standard extension subroutine:
;   ${ARG1} - Extension
;   ${ARG2} - Device(s) to ring
;   ${ARG3} - Optional DONTCALL context name to jump to (assumes the s,1 extension-priority)
;   ${ARG4} - Optional TORTURE context name to jump to (assumes the s,1 extension-priority)`
;   ${ARG5} - Context in voicemail (if empty, then "default")
;
; See above note in stdexten about priority handling on exit.
;
exten => _X.,60000(stdPrivacyexten),NoOp(Start stdPrivacyexten)
exten => _X.,n,Set(LOCAL(ext)=${ARG1})
exten => _X.,n,Set(LOCAL(dev)=${ARG2})
exten => _X.,n,Set(LOCAL(dontcntx)=${ARG3})
exten => _X.,n,Set(LOCAL(tortcntx)=${ARG4})
exten => _X.,n,Set(LOCAL(cntx)=${ARG5})

exten => _X.,n,Set(LOCAL(mbx)="${ext}"$["${cntx}" ? "@${cntx}" :: ""])
exten => _X.,n,Dial(${dev},20,p)			; Ring the interface, 20 seconds maximum, call screening
						; option (or use P for databased call _X.creening)
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,NoOp(Finish stdPrivacyexten NOANSWER)
exten => stdexten-NOANSWER,n,Return()			; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)		; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,NoOp(Finish stdPrivacyexten BUSY)
exten => stdexten-BUSY,n,Return()			; If they press #, return to start

exten => stdexten-DONTCALL,1,Goto(${dontcntx},s,1)	; Callee chose to send this call to a polite "Don't call again" script.

exten => stdexten-TORTURE,1,Goto(${tortcntx},s,1)	; Callee chose to send this call to a telemarketer torture script.

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})		; If they press *, send the user into VoicemailMain
exten => a,n,Return()


[macro-LBDial]
exten => s,1,NoOp(Macro:LBDial)
;exten => s,n,GotoIf($[${LEN(${BLINDTRANSFER})} = 0]?here)
;exten => s,n,NoOp(BLINDTRANSFER=${BLINDTRANSFER})
;exten => s,n,Set(STATION=${CUT(BLINDTRANSFER,,-1):4})
;exten => s,n,NoOp(STATION=${STATION})
;exten => s,n,SIPAddHeader(Diversion:  <sip:${STATION}@10.0.0.131>\;privacy=off\;reason=unconditional)
;exten => s,n,Set(PJSIP_HEADER(add,P-Asserted-Identity)=sip:123456789@10.0.0.131)
exten => s,n(here),Dial(PJSIP/${ARG1}@CAEntLvl-no8g-EBI1,${ARG2},${ARG3},${ARG4})
;exten => s,n(here),Dial(SIP/${ARG1}@VerizonSBCaaS1,${ARG2},${ARG3},${ARG4})

[catch-all]
exten => _[+0-9].,1,Answer()
exten => _[+0-9].,n,Progress()
exten => _[+0-9].,n,Wait(1)
exten => _[+0-9].,n,Playback(hello-world)
exten => _[+0-9].,n,Wait(1)
exten => _[+0-9].,n,Echo()
exten => _[+0-9].,n,Wait(1)
exten => _[+0-9].,n,Hangup()

[handler]
;exten => addheader,1,Set(PJSIP_HEADER(add,Diversion)=<sip:7783090451@10.0.0.230>\;privacy=off\;reason=unconditional)
exten => addheader,1,Set(PJSIP_HEADER(add,Diversion)=<sip:4384690257@10.0.0.230>\;privacy=off\;reason=unconditional)
;exten => addheader,1,Set(REDIRECTING(from-num)=<7783090451>)

[Handlers]
; Add Header to the Outbound Call
exten => addHeaders,1,NoOp(Set Both Diversion[${ARG1}] Paid[${ARG2}] using Domain [${ARG3}] and Codecs [${ARG4}])
 same => n,NoOP(addHeaders ${ARG1} ${ARG2} ${ARG3} ${ARG4})

 ; Future set the Domain if provided. Need to tes tthis line first.
 ;same => n,Set(MyDOM=IF($["${ARG3}" = ""]?${DOM1}:${ARG3}))

 same => n,GotoIf($["${ARG1}" = ""]?skipDiversion)}
 same => n,set(PJSIP_HEADER(add,Diversion)=<sip:${ARG1}@${DOM1}>);\;privacy=off\;reason=unconditional)
 same => n(skipDiversion),NoOp()

 same => n,GotoIf($["${ARG2}" = ""]?skipPAID)}
 same => n,Set(PJSIP_HEADER(add,P-Asserted-Identity)=<sip:${ARG2}@${DOM1}>)
 same => n(skipPAID),NoOp()

 same => n,NoOp(ARG4 is ${ARG4})
 same => n,GotoIf($["${ARG4}" = ""]?skipCODECS)}
 same => n,Set(CODECS=${REPLACE(ARG4,|,\054)})
 same => n,Set(PJSIP_MEDIA_OFFER(audio)=!all,${CODECS})
 same => n(skipCODECS),NoOp()

 same => n,NoOp(CALLID = ${CHANNEL(pjsip,call-id)})
 same => n,Set(CDR(callid)=${CHANNEL(pjsip,call-id)})

 same => n,return()


[outbound]
;; E.164 Digit Dialing
;exten => _+1NXXNXXXXXX,1,NoOp(Outbound E.164 Pattern)
; same => n,Set(CALLERID(all)= "ATG ALCID Test" <6123066440>)
; same => n,Dial(PJSIP/${EXTEN}@CAEntLvl-CanadaEBI1,,b(handler^addheader^1))
; same => n,Congestion

; Dialing *codes
exten => _*[0-9].,1,NoOp(Outbound Star Codes)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

; Dialing 911
exten => 911,1,NoOp(Outbound 911)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

; N11 Digit Dialing NOT 911
exten => _[2345678]11,1,NoOp(Outbound N11 Pattern WITHOUT 911)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

exten => _X.,1,NoOP(Outbound all non-plus patterns)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

exten => _+X.,1,NoOP(Outbound all plus patterns)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

exten => 0,1,NoOP(Outbound Operator 0)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

exten => 00,1,NoOP(Outbound Operator 00)
 same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
 same => n,Congestion

[from-verizon]
exten => +19193798730,1,Goto(TestCases,portal,1)
exten => +496922229925,1,Goto(TestCases,portal,1)

include => sip-phones
include => catch-all

[from-phone]
include => sip-phones
include => outbound 
include => catch-all

[TestCases]
exten => portal,1,NoOp(Portal)
 same => n,Ringing()
 same => n,Wait(1)
 same => n,Answer()
 same => n,Gosub(testkit,validate-caller,1(${CALLERID(num):1},access-code,9459312))
 
; Get digits for test and other
 same => n(validCaller),NoOp(Valid Caller)
 same => n,Playback(beep)
 same => n,Read(MyDigits,,0,n,,60)
 same => n,SayAlpha(${MyDigits})

 ; Check for valid format and length, adjust CN code to two digits
 same => n,Set(CODE=${MyDigits})
 same => n,GotoIf($[${LEN(${MyDigits})} < 3]?ERROR)
 same => n,GotoIf($[${LEN(${MyDigits})} = 3]?ENTER)
 same => n,Set(CODE=${MyDigits:3})

 ; If single digit add a leading "0"
 same => n,Set(CODE=${IF($[${LEN(${CODE})} = 1]?"0"${CODE}:${CODE})})

 ; Look Up CN Code, 
 same => n(LOOKUP),NoOp(Lookup CN from CODE x${CODE}x)
 same => n,Set(CODE=${IF($["${CODE}" == "01"]?"+16123066440":${CODE})}) ;Dave Cell
 same => n,Set(CODE=${IF($["${CODE}" == "02"]?"+17632584535":${CODE})}) ;Dave Cell
 same => n,Set(CODE=${IF($["${CODE}" == "03"]?"+4969972686578":${CODE})}) ;Sandra Cell
 same => n,Set(CODE=${IF($["${CODE}" == "04"]?"+17035977082":${CODE})}) ;Hae Cell

 same => n,Set(CN=${CODE})
 same => n,GotoIf($[${LEN(${CODE})} > 2]?E164)

 ; Get Number to Call since valid CN code was not provided
 same => n(ENTER),NoOp(Prompt for TN or CN if needed. Not needed for X00.)
   ; Check to see if we need to prompt for a number.  Only needed for X00 tests.
 same => n,NoOp(CODE is "${CODE:1:2}" "00")
 same => n,GotoIf($["${CODE:1:2}" != "00"]?RUNTEST) 
 same => n(ENTER),Playback(vm-enter-num-to-call)
 same => n,Read(CN,,0,n,,60)

 ;Change "000" to "+"
 same => n(E164),Set(CN=${IF($["${CN:0:3}" == "000"]?"+${CN:3}":${CN})})

 ; Run Test
 same => n(RUNTEST),NoOp( Run test with Test ${MyDigits:0:3} calling ${CN})
 same => n,GoSub(TestCases,${MyDigits:0:3},1,(${CODE}))
 same => n,Goto(END)
 ;Found Error 
 same => n(ERROR),Playback(custom/hal-sorry-dave)
 same => n(END),hangup()





 same => n,GoSub(TestCases,${MyDigits},1)
 same => n,hangup()


; List of predefined tests
; TestOut (Title, To, From, Diversion, Paid, EBI)
; Gosub(testkit,outbounf-test,1,([Title],[To],[From],[Diversion],[Paid],[EBI],[Codec|List]))

exten => 100,1,GoSub(testkit,outbound-test,1,(G100,${CN},+19193798728,,,USCAEL-EBI2,,${DOM1}))
exten => 200,1,GoSub(testkit,outbound-test,1,(G200,${CN},+6474750160,,,USCAEL-EBI2,,${DOM1}))
exten => 300,1,GoSub(testkit,outbound-test,1,(G300,${CN},+523321020186,,,USCAEL-EBI2,,${DOM1}))

;Argentina
exten => 400,1,GoSub(testkit,outbound-test,1,(G400,${CN},+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 401,1,GoSub(testkit,outbound-test,1,(L401,01145156100,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 402,1,GoSub(testkit,outbound-test,1,(L402,01163802200,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 403,1,GoSub(testkit,outbound-test,1,(L403,03414100000,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 404,1,GoSub(testkit,outbound-test,1,(L404,03515266600,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 405,1,GoSub(testkit,outbound-test,1,(L405,01145156176,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 406,1,GoSub(testkit,outbound-test,1,(L406,113,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 407,1,GoSub(testkit,outbound-test,1,(L407,114,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 408,1,GoSub(testkit,outbound-test,1,(L408,102,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 409,1,GoSub(testkit,outbound-test,1,(L409,103,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 410,1,GoSub(testkit,outbound-test,1,(L410,106,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 411,1,GoSub(testkit,outbound-test,1,(L411,100,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 412,1,GoSub(testkit,outbound-test,1,(L412,101,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 413,1,GoSub(testkit,outbound-test,1,(L413,107,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 414,1,GoSub(testkit,outbound-test,1,(L414,911,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 415,1,GoSub(testkit,outbound-test,1,(L415,08005550700,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 416,1,GoSub(testkit,outbound-test,1,(L416,08102222665464,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 417,1,GoSub(testkit,outbound-test,1,(L417,004960615991,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 418,1,GoSub(testkit,outbound-test,1,(L418,0033130453667,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 419,1,GoSub(testkit,outbound-test,1,(L419,00491707758378,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 420,1,GoSub(testkit,outbound-test,1,(L420,0033621765116,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 421,1,GoSub(testkit,outbound-test,1,(L421,,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 422,1,GoSub(testkit,outbound-test,1,(L422,00815045600001,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 423,1,GoSub(testkit,outbound-test,1,(L423,,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 424,1,GoSub(testkit,outbound-test,1,(L424,,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 425,1,GoSub(testkit,outbound-test,1,(L425,080017777777,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 426,1,GoSub(testkit,outbound-test,1,(L426,0018668449390,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 427,1,GoSub(testkit,outbound-test,1,(L427,004990055102030,+541152793324,,,USCAEL-EBI2,,${DOM1}))
exten => 428,1,GoSub(testkit,outbound-test,1,(L428,00491802222222,+541152793324,,,USCAEL-EBI2,,${DOM1}))

;Brazil
exten => 500,1,GoSub(testkit,outbound-test,1,(G500,${CN},+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 501,1,GoSub(testkit,outbound-test,1,(L501,0151133184000,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 502,1,GoSub(testkit,outbound-test,1,(L502,0151121078844,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 503,1,GoSub(testkit,outbound-test,1,(L503,0156132184700,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 504,1,GoSub(testkit,outbound-test,1,(L504,0155133027600,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 505,1,GoSub(testkit,outbound-test,1,(L505,01511983931114,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 506,1,GoSub(testkit,outbound-test,1,(L506,100,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 507,1,GoSub(testkit,outbound-test,1,(L507,136,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 508,1,GoSub(testkit,outbound-test,1,(L508,147,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 509,1,GoSub(testkit,outbound-test,1,(L509,188,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 510,1,GoSub(testkit,outbound-test,1,(L510,199,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 511,1,GoSub(testkit,outbound-test,1,(L511,153,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 512,1,GoSub(testkit,outbound-test,1,(L512,181,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 513,1,GoSub(testkit,outbound-test,1,(L513,190,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 514,1,GoSub(testkit,outbound-test,1,(L514,191,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 515,1,GoSub(testkit,outbound-test,1,(L515,192,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 516,1,GoSub(testkit,outbound-test,1,(L516,193,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 517,1,GoSub(testkit,outbound-test,1,(L517,194,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 518,1,GoSub(testkit,outbound-test,1,(L518,197,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 519,1,GoSub(testkit,outbound-test,1,(L519,198,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 520,1,GoSub(testkit,outbound-test,1,(L520,911,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 521,1,GoSub(testkit,outbound-test,1,(L521,0158001623232,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 522,1,GoSub(testkit,outbound-test,1,(L522,00154960615991,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 523,1,GoSub(testkit,outbound-test,1,(L523,001533130453667,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 524,1,GoSub(testkit,outbound-test,1,(L524,0015491707758378,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 525,1,GoSub(testkit,outbound-test,1,(L525,001533621765116,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 526,1,GoSub(testkit,outbound-test,1,(L526,,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 527,1,GoSub(testkit,outbound-test,1,(L527,0015815045600001,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 528,1,GoSub(testkit,outbound-test,1,(L528,,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 529,1,GoSub(testkit,outbound-test,1,(L529,,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 530,1,GoSub(testkit,outbound-test,1,(L530,080017777777,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 531,1,GoSub(testkit,outbound-test,1,(L531,001518668449390,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 532,1,GoSub(testkit,outbound-test,1,(L532,00154990055102030,+551141189471,,,USCAEL-EBI2,,${DOM1}))
exten => 533,1,GoSub(testkit,outbound-test,1,(L533,15491802222222,+551141189471,,,USCAEL-EBI2,,${DOM1}))

[sip-phones]
include => stdexten

;United States
exten => +19193798728,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +19193798729,1,GoSub(${EXTEN:2},stdexten(PJSIP/${EXTEN:2}))
exten => +19193798730,1,GoSub(${EXTEN:2},stdexten(PJSIP/${EXTEN:2}))
;Mexico
exten => +525553390153,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +525553390154,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +523321020185,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +523321020186,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
;Argentina
exten => +541152793323,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +541152793327,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
; Brazil
exten => +551141189394,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +551141189478,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))


