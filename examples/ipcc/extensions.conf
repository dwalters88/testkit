[globals]
INTERNAL_DIAL_OPT=,20
MAXSBC=2
CURRENTSBC=0

DOM1=verizon.internals.globalipcom.com ; This is the Verizon customer Domain.  This allows us to respond regardless of which EBI we use. 

#include testkit/testkit.conf

[stdexten]
;
; Standard extension subroutine:
;   ${EXTEN} - Extension
;   ${ARG1} - Device(s) to ring
;   ${ARG2} - Optional context in Voicemail
;
; Note that the current version will drop through to the next priority in the
; case of their pressing '#'.  This gives more flexibility in what do to next:
; you can prompt for a new extension, or drop the call, or send them to a
; general delivery mailbox, or...
;
; The use of the LOCAL() function is purely for convenience.  Any variable
; initially declared as LOCAL() will disappear when the innermost Gosub context
; in which it was declared returns.  Note also that you can declare a LOCAL()
; variable on top of an existing variable, and its value will revert to its
; previous value (before being declared as LOCAL()) upon Return.
;
exten => _X.,50000(stdexten),NoOp(Start stdexten)
exten => _X.,n,Set(LOCAL(ext)=${EXTEN})
exten => _X.,n,Set(LOCAL(dev)=${ARG1})
exten => _X.,n,Set(LOCAL(cntx)=${ARG2})
;exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
exten => _X.,n,Dial(${dev},20)                          ; Ring the interface, 20 seconds maximum
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)           ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => _+X.,50000(stdexten),NoOp(Start stdexten)
exten => _+X.,n,Set(LOCAL(ext)=${EXTEN})
exten => _+X.,n,Set(LOCAL(dev)=${ARG1})
exten => _+X.,n,Set(LOCAL(cntx)=${ARG2})
;exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
exten => _+X.,n,Dial(${dev},20)                         ; Ring the interface, 20 seconds maximum
exten => _+X.,n,Goto(stdexten-${DIALSTATUS},1)          ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)


exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)        ; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,Return()                   ; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)            ; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,Return()                       ; If they press #, return to start

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)    ; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})                      ; If they press *, send the user into VoicemailMain
exten => a,n,Return()

[Handlers]
exten => Dialer,1,NoOp(Handler:Dialer ${ARG1} ${ARG2})
; same => n,GotoIf($[${LEN(${BLINDTRANSFER})} = 0]?here)
; same => n,NoOp(BLINDTRANSFER=${BLINDTRANSFER})
; same => n,Set(STATION=${CUT(BLINDTRANSFER,,-1):4})
; same => n,NoOp(STATION=${STATION})
;same => n,SIPAddHeader(Diversion:  <sip:${STATION}@10.0.0.98>\;privacy=off\;reason=unconditional)
 same => n(here),Dial(PJSIP/${ARG1}@SBC${CURRENTSBC},,wW)
 same => n,Return()

exten => RRNDialer,1,NoOp(Handler:RRNDialer ${ARG1} ${ARG2})
 same => n,NoOp(Dial SBC${CURRENTSBC} TEST of Round Robin)
 same => n,Set(GLOBAL(CURRENTSBC)=${IF($[${CURRENTSBC} >= ${MAXSBC}]?1:$[${CURRENTSBC}+1])})
 same => n(here),Dial(PJSIP/${ARG1}@SBC${CURRENTSBC},,wW)
 same => n,Return()

exten => LBDialer,1,NoOp(Handler:LBDialer ${ARG1} ${ARG2})
 same => n,Set(SBCS=3) ; Number of SBCS, all in Endpoints names SBCx
 same => n,Set(INDEX=1)
 same => n,Set(RANDOM=${RAND(0,$[${SBCS} - 1])})
 same => n(CALL),NoOP(Attempt Call)
 same => n,Set(TARGET=SBC$[(${INDEX} + ${RANDOM})%(${SBCS}) + 1])
 same => n,Dial(PJSIP/${ARG1}@${TARGET},${ARG2},${ARG3},${ARG4})
 same => n,GotoIf($[${INDEX} >= ${SBCS}]?END:)
 same => n,Set(INDEX=$[${INDEX}+1])
 same => n,GotoIf($["${DIALSTATUS}" = "CHANUNAVAIL"]?CALL:)
 same => n,GotoIf($["${DIALSTATUS}" = "CONGESTION"]?CALL:)
 same => n(END),NoOP(End of Macro:LBDial)
 same => n,Return()
; SBCS= # of SBCs
; index = RND between 1 - SBCs
; stop  = index + SBCs - 1
; Call via Index
; if success goto end
; if index = stop goto end
; index = index + 1
; Goto call
;
exten = SIPExten,1,Verbose(1, "DialUser ${CALLERID(num)} dialed ${ARG1} ${ARG2} ${ARG3}.")
 same = n,Set(LOCAL(ext)=${ARG1})
 same = n,Set(LOCAL(dev)=${ARG2})
 same = n,Set(LOCAL(cntx)=${ARG3})
 same = n,Dial(${dev}${INTERNAL_DIAL_OPT})
 same = n,Goto(dialed-${DIALSTATUS},1)

exten = dialed-NOANSWER,1,NoOp(STATUS: NOANSWER)
 same = n,Return()

exten = dialed-BUSY,1,NoOp(STATUS: BUSY)
 same = n,Return()

exten = dialed-CHANUNAVAIL,1,NoOp(STATUS: CHANUNAVAIL)
 same = n,Return()

exten = _dialed-.,1,NoOp(Dialed other ${DIALSTATUS})
 same = n,Goto(dialed-NOANSWER,1)

; Add Header to the Outbound Call
exten => addHeaders,1,NoOp(Set Both Diversion[${ARG1}] Paid[${ARG2}] using Domain [${ARG3}])
 same => n,NoOP(PASS BY ARGUMENT ${ARG1} ${ARG2} ${ARG3})

 ; Future set the Domain if provided. Need to tes tthis line first.
 ;same => n,Set(MyDOM=IF($["${ARG3}" = ""]?${DOM1}:${ARG3}))

 same => n,GotoIf($["${ARG1}" = ""]?skipDiversion)}
 same => n,set(PJSIP_HEADER(add,Diversion)=<sip:${ARG1}@${DOM1}>);\;privacy=off\;reason=unconditional)
 same => n(skipDiversion),NoOp()

 same => n,GotoIf($["${ARG2}" = ""]?skipPAID)}
 same => n,Set(PJSIP_HEADER(add,P-Asserted-Identity)=<sip:${ARG2}@${DOM1}>)
 same => n(skipPAID),NoOp()

 same => n,NoOp(CALLID = ${CHANNEL(pjsip,call-id)})
 same => n,Set(CDR(callid)=${CHANNEL(pjsip,call-id)})
 same => n,return()

; Macro to make outbound call with a variety of SIP headers
exten =>TestOut,1,NoOp(TestOut ([${ARG1}],[${ARG2}],[${ARG3}],[${ARG4}],[${ARG5}],[${ARG6}]))
 same => n,Set(ARRAY(Title,To,From,Diversion,PAID,EBI)=${ARG1},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6})
 same => n,NoOp(TestOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}]))

 ; Set Title
 same => n,Set(Title=${IF($[ "${Title}" = ""]?#:${Title})})
 same => n,Set(Title=${IF($[ "${Title}" = "#"]?ECN Test(${EXTEN}):${Title})})
 same => n,Set(Caller=${CALLERID(name)})
 same => n,set(CALLERID(name)=${Title}-${Caller})
 same => n,set(CALLERID(num)=${From})

 ; Set correct EBI source, default to LLD
 same => n,Set(EBI=${IF($[ "${EBI}" = ""]?LLD:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LLD]?USLocLvl-USLLET4EBI1:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LDO]?USLocLvl-AsteriskEBI1:${EBI})})

 ; Make Call
 same => n,NoOp(ecnOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}]))
 same => n,Dial(PJSIP/${To}@${EBI},,b(handler^addHeaders^1(${Diversion},${PAID})))

;;; Record Audio
exten => RecAudio,1,NoOp(Record Audio)
 same => n,Set(RecTime=${STRFTIME(,,%Y%m%dT%H%M%S%3q)})
 same => n,Set(RecType=g722)
 same => n,Set(RecFile=${RecTime})
 same => n,Record(recordings/${RecFile}.${RecType})
 ;same => n,System(/usr/sbin/asterisk -rx "file convert recordings/${RecFile}.${RecType} recordings/${RecFile}.g729")
 ;same => n,System(/usr/sbin/asterisk -rx "file convert recordings/${RecFile}.${RecType} recordings/${RecFile}.ulaw")
 same => n,System(/usr/sbin/asterisk -rx "file convert recordings/${RecFile}.${RecType} recordings/A.g729")
 same => n,System(/usr/sbin/asterisk -rx "file convert recordings/${RecFile}.${RecType} recordings/B.ulaw")
 same => n,Wait(1)
 same => n,Playback(recordings/${RecFile})
 same => n,Playback(recordings/B)
 same => n,Playback(recordings/A)
 same => n,Playback(recordings/${RecFile})
 same => n,Return(${RecFile})

[catch-all]
exten => _[+0-9].,1,Answer()
exten => _[+0-9].,n,Progress()
exten => _[+0-9].,n,Wait(1)
exten => _[+0-9].,n,Playback(custom/hal-sorry-dave)
;exten => _[+0-9].,n,Playback(hello-world)
exten => _[+0-9].,n,Wait(1)
exten => _[+0-9].,n,Echo()
exten => _[+0-9].,n,Wait(1)
exten => _[+0-9].,n,Hangup()

[headers]

[lookup]
exten => cluster,1,NoOp(lookup:Cluster Key=${ARG1})
 same => n,Set(CODE=${ARG1})
 same => n,Set(CODE=${IF($["${CODE}" == "16"]?"rij6":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "17"]?"rij7":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "18"]?"rij8":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "19"]?"rij9":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "10"]?"rij10":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "26"]?"s7x6":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "27"]?"s7x7":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "28"]?"s7x8":${CODE})})
 same => n,Set(CODE=${IF($["${CODE}" == "29"]?"s7x9":${CODE})})
 same => n,Return(${CODE})

exten => target,1,NoOp(lookup:Target Key=${ARG1})
 same => n,Set(CODE=${ARG1})
 same => n,Set(CODE=${IF($["${CODE}" == "01"]?"+18176758998":${CODE})}) ; Paul
 same => n,Set(CODE=${IF($["${CODE}" == "02"]?"+16828007069":${CODE})}) ; Steve
 same => n,Set(CODE=${IF($["${CODE}" == "10"]?"+16123066440":${CODE})}) ; Dave
 same => n,Return(${CODE})

exten => cluster-stn,1,NoOp(lookup:Cluster-STN Key=${ARG1})
 same => n,Set(TEMP=${ARG1})
 same => n,Set(TEMP=${IF($["${TEMP}" == "rij6"]?"+13192139030":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "rij7"]?"+13192139047":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "rij8"]?"+13192139036":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "rij9"]?"+13192139035":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "rij10"]?"+13192139049":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "s7x6"]?"+13192139023":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "s7x7"]?"+13192139019":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "s7x8"]?"+13192139065":${TEMP})})
 same => n,Set(TEMP=${IF($["${TEMP}" == "s7x9"]?"+13192139021":${TEMP})})
 same => n,Return(${TEMP})

[tools]
exten => portal,1,NoOP(Tools:Portal)
 ;Validate Caller
 same => n,NoOp(CALLERID(num) = ${CALLERID(num)})
 same => n,GotoIf($["${CALLERID(num)}" = "+16123066440"]?validCaller)}; David Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+17632584535"]?validCaller)}; David Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+16828007069"]?validCaller)}; Steven's Phone 
 same => n,GotoIf($["${CALLERID(num)}" = "+12144384952"]?validCaller)}; Paul's Jabber Phone 
 same => n,GotoIf($["${CALLERID(num)}" = "+18176758998"]?validCaller)}; Paul's Cell Phone 
 same => n,GotoIf($["2" = "1"]?validCaller)}
 same => n,Playback(beeperr)
 same => n,Playback(access-code)
 same => n,Read(MyDigits,,0,n,,60)
 same => n,NoOp(Reciecved Mydigits = ${MyDIgits})
 same => n,GotoIf($["${MyDigits}" = "9459"]?validCaller)}
 same => n,Playback(beeperr)
 same => n,Playback(beeperr)
 same => n,hangup()
 same => n(validCaller),NoOp(Valid Caller)
 same => n,Return()

[testsub]
 
exten => s,1,NoOp(ARG1=${ARG1} ARG2=${ARG2})
same => n,Playback(hello-world)
same => n,Return()
 
[from-verizon]
include => sip-phones

;exten = 8336791510,1,NoOp(IPCC Activation Test)
; ; Answer call
; same => n,Ringing()
; same => n,Wait(1)
; same => n,Answer()
; ;Validate Caller with prompt and passcode, or pre-validate list.
; same => n,GoSub(testkit,validate-caller,1,(${CALLERID(num)},access-code,5117))
; ;Get number to call
; same => n,Playback(vm-enter-num-to-call)
; same => n,Read(MyDigits,,0,n,,60)
; same => n,Set(TO=${MyDigits})
; same => n,GotoIf($[${LEN(${MyDigits})} > 1]?E164)
; ;Look for predefine called party
; same => n,Set(TO=${IF($["${MyDigits}" == "9"]?"+16123066440":${MyDigits})}) ; Dave
; ;Change "000" to "+"
; same => n(E164),Set(TO=${IF($["${TO:0:3}" == "000"]?"+${TO:3}":${TO})})
; ;Call Number
; ;same => n,Set(CALLERID(num)=${EXTEN})
; same => n,Set(CALLERID(num)=+16123066440)
;; same => n,GoSub(Handlers,RRNDialer,1,(${TO}))
; ;same => n,Dial(PJSIP/${TO}@SBC1,,wW)
; same => n,Dial(PJSIP/${TO}@SBC1,,U(testsub))
; same => n,Wait(1)
; same => n,Playback(custom/hal-sorry-dave)
; same => n,Congestion()

exten = 8336791510,1,NoOp(IPCC Activation Test)
; Answer call
 same => n,Ringing()
 same => n,Wait(1)
 same => n,Answer()

 ;Validate Caller with prompt and passcode, or pre-validate list.
 same => n,NoOp(CALLERID-NUM = ${CALLERID(num)})
 same => n,GoSub(testkit,validate-caller,1,(${CALLERID(num)},enter-password,5117))

 ;Get Test CASE and maybe TO
 same => n,Playback(access-code)
 same => n,Read(MyDigits,,0,n,,60)
 same => n,GotoIf($[${LEN(${MyDigits})} > 2]?extCASE)
 same => n,Playback(access-code)
 same => n,Read(MyDigits,,0,n,,60)
 same => n,GotoIf($[${LEN(${MyDigits})} > 2]?extCASE)
 same => n,Playback(beeperr)
 same => n,Hangup()

 ;Extract CASE and Maybe get TO
 same => n(extCASE),Set(CASE=${MyDigits:0:3})

 same => n,NoOP(${LEN(${MyDigitis})})
 same => n,Set(TO=${IF($[${LEN(${MyDigits})} > 3]?${MyDigits:3}:)})
 same => n,GotoIf($[${LEN(${TO})} > 2]?E164)
 same => n,Set(TO=${IF($[${LEN(${TO})} == 1]?0${TO}:${TO})})
 same => n,GotoIf($[${LEN(${TO})} = 2]?predial)

 ;Get TO
 same => n,Playback(number)
 same => n,Read(TO,,0,n,,60)
 same => n,GotoIf($[${LEN(${TO})} = 0]?end)
 same => n,Set(TO=${IF($[${LEN(${TO})} == 1]?0${TO}:${TO})})

;Get Predial code
 same => n(predial),GotoIf($[${LEN(${TO})} > 2]?E164)
 same => n,Set(TO=${IF($["${TO}" == "01"]?"+13032185666":${TO})}) ; Original Test Center
 same => n,Set(TO=${IF($["${TO}" == "03"]?"+15714172835":${TO})}) ; Omar 
 same => n,Set(TO=${IF($["${TO}" == "03"]?"+18573528173":${TO})}) ; Parul 
 same => n,Set(TO=${IF($["${TO}" == "09"]?"+16123066440":${TO})}) ; Dave for testing
 same => n,Set(TO=${IF($["${TO}" == "99"]?"+13032185659":${TO})}) ; Beep and Hangup (on development Asterisk)

 ;Change "000" to "+"
 same => n(E164),Set(TO=${IF($["${TO:0:3}" == "000"]?"+${TO:3}":${TO})})

 ;Call Number
 same => n,GoSub(TestCenter-Tests,${CASE},1,(${TO}))

 ;End Call
 same => n(end),Hangup()

;;Call Back Offer for Kent's VHT Testing
;Temp for IPCC Activations
;xten = 8336411133,1,NoOp(IPCC Activation Test)
;same => n,Ringing()
;same => n,Answer()
;same => n,Wait(1)
;same => n,Playback(custom/hal-sorry-dave)
;;same => n,Transfer(PJSIP/<sip:+18335291722@172.31.148.109?User-To-User=HelloKent>)
;same => n,Transfer(PJSIP/<sip:+18333670464@172.31.148.109?User-To-User=HelloKent>)
;same => n,Congestion

; Temporary reuse for Omar
; 2022-02-23
; Dial Through for Omar 
exten = 8339864411,1,NoOp(Dialthrough for Omar)
 same => n,Ringing()
 same => n,Wait(5)
 same => n,Answer()
 same => n,Set(CALLERID(num)=+18339864411)
 same => n,Dial(PJSIP/+13474819067@SBC1)
 same => n,Hangup()

; Dial Through for Omar 
exten = 8339864412,1,NoOp(Dialthrough for Parul)
 same => n,Ringing()
 same => n,Wait(5)
 same => n,Answer()
 same => n,Set(CALLERID(num)=+18339864412)
 same => n,Dial(PJSIP/+18573528173@SBC1)
 same => n,Hangup()



;+18573528173
; Dial Through for Dave Walters 
exten = 8336411133,1,NoOp(Dial through for Dave)
 same => n,Ringing()
 same => n,Wait(5)
 same => n,Answer()

 same => n,GoSub(testkit,validate-caller,1,()
 same => n,wait(3)
 same => n,GoSub(testkit,validate-caller,1,(,,N))
 same => n,wait(3)
 same => n,GoSub(testkit,validate-caller,1,(,hello-world,,ipcc))
 same => n,wait(3)
 same => n,GoSub(testkit,validate-caller,1,(,,,ipcc))
 same => n,wait(3)

 same => n,Hangup()


; Dial Through for John O'Donnell 
exten = 8336900665,1,NoOp(Dialthrough for John)
 same => n,Ringing()
 same => n,Wait(5)
 same => n,Answer()
 same => n,Set(CALLERID(num)=+18336900655)
 same => n,Dial(PJSIP/+18134044292@SBC1)
 same => n,Hangup()

; Message for John O'Donnell 
exten = 12345,1,NoOp(Message for John)
 same => n,Ringing()
 same => n,Wait(5)
 same => n,Playback(zombies)
 same => n,Answer()
 same => n,Hangup()


;Kent's VHT Testing
exten = 8335291722,1,NoOp(IPCC Activation Test)
 same => n,Ringing()
 same => n,Answer()
 same => n,Wait(1)
 same => n,Set(UUID=${PJSIP_HEADER(read,User-To-User)})
 same => n,NoOp(UUID = ${UUID})
 same => n,SayAlpha(UUID)
 same => n,SayAlpha(${UUID})
; same => n,Playback(custom/hal-sorry-dave)
 same => n,Dial(PJSIP/1000@1000)
 same => n,Dial(PJSIP/1001@1001)
 same => n,Congestion

exten => 22,1,NoOp(Record and play audio)
 same => n,Answer(500)
 same => n,GoSub(Handlers,RecAudio,1)
 same => n,Hangup()

include => catch-all

[from-other]
include => sip-phones
include => catch-all

[outbound]
exten => _XXXX,1,NoOp(Dialed four digit extention)
 same => n,Dial(PJSIP/${EXTEN}@OTHER)
 same => n,Congestion

;; Send anything we have to Verizon  all patterns
exten => _[*+0-9].,1,NoOP(Outbound all patterns ${EXTEN})
 same => n,GoSub(Handlers,RRNDialer,1,(${EXTEN}))
 same => n,Congestion

;; E.164 Digit Dialing
;exten => _+1NXXNXXXXXX,1,NoOp(Outbound E.164 Pattern)
; same => n,Set(CALLERID(all)= "ATG ALCID Test" <6123066440>)
; same => n,Dial(PJSIP/${EXTEN}@CAEntLvl-CanadaEBI1,,b(handler^addheader^1))
; same => n,Congestion

;; Dialing 911
;exten => 911,1,NoOp(Outbound 911)
;; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;; N11 Digit Dialing NOT 911
;exten => _[2345678]11,1,NoOp(Outbound N11 Pattern WITHOUT 911)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;exten => _X.,1,NoOP(Outbound all non-plus patterns)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;exten => _+X.,1,NoOP(Outbound all plus patterns)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;exten => 0,1,NoOP(Outbound Operator 0)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;exten => 00,1,NoOP(Outbound Operator 00)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
[from-phone]
exten => 22,1,NoOp(Record and play audio)
 same => n,Answer(500)
 same => n,GoSub(Handlers,RecAudio,1)
 same => n,Hangup()
;include => sip-phones
include => outbound
include => catch-all

[sip-phones]
include => stdexten

exten => 1000,1,GoSub(${EXTEN},Dial-Users(PJSIP/${EXTEN}))
exten => 1001,1,GoSub(${EXTEN},Dial-Users(PJSIP/${EXTEN}))
exten => 8888,1,GoSub(${EXTEN},Dial-Users(PJSIP/${EXTEN}))
exten => +14696973520,1,GoSub(Handlers,SIPExten,1,(${EXTEN},PJSIP/${EXTEN}))

; Quick setup for Omar, to look like USEL portal 19193798090


[TestLaunch]
; Macro to make outbound call with a variety of SIP headers
exten =>TestOut,1,NoOp(TestOut ([${ARG1}],[${ARG2}],[${ARG3}],[${ARG4}],[${ARG5}],[${ARG6}]))
 same => n,Set(ARRAY(Title,To,From,Diversion,PAID,EBI)=${ARG1},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6})
 same => n,NoOp(TestOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}]))

 ; Set Title
 same => n,Set(Title=${IF($[ "${Title}" = ""]?#:${Title})})
 same => n,Set(Title=${IF($[ "${Title}" = "#"]?ECN Test(${EXTEN}):${Title})})
 same => n,Set(Caller=${CALLERID(name)})
 same => n,set(CALLERID(name)=${Title}-${Caller})
 same => n,set(CALLERID(num)=${From})

 ; Set correct EBI source, default to LLD
 same => n,Set(EBI=${IF($[ "${EBI}" = ""]?LLD:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LLD]?SBC1:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LDO]?SBC2:${EBI})})

 ; Make Call
 same => n,NoOp(TestOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}]))
 same => n,Dial(PJSIP/${To}@${EBI},,b(Handlers^addHeaders^1(${Diversion},${PAID})))


[TestCenter-Tests]
exten => 100,1,GoSub(TestLaunch,TestOut,1,(C100-BasicCall,${ARG1},+18336791510,,,SBC1))

