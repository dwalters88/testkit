[globals]
INTERNAL_DIAL_OPT=,20
MAXSBC=2
CURRENTSBC=0

;[stdexten]
;;
;; Standard extension subroutine:
;;   ${EXTEN} - Extension
;;   ${ARG1} - Device(s) to ring
;;   ${ARG2} - Optional context in Voicemail
;;
;; Note that the current version will drop through to the next priority in the
;; case of their pressing '#'.  This gives more flexibility in what do to next:
;; you can prompt for a new extension, or drop the call, or send them to a
;; general delivery mailbox, or...
;;
;; The use of the LOCAL() function is purely for convenience.  Any variable
;; initially declared as LOCAL() will disappear when the innermost Gosub context
;; in which it was declared returns.  Note also that you can declare a LOCAL()
;; variable on top of an existing variable, and its value will revert to its
;; previous value (before being declared as LOCAL()) upon Return.
;;
;exten => _X.,50000(stdexten),NoOp(Start stdexten)
;exten => _X.,n,Set(LOCAL(ext)=${EXTEN})
;exten => _X.,n,Set(LOCAL(dev)=${ARG1})
;exten => _X.,n,Set(LOCAL(cntx)=${ARG2})
;;exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
;exten => _X.,n,Dial(${dev},40)                          ; Ring the interface, 20 seconds maximum
;exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)           ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)
;
;exten => _+X.,50000(stdexten),NoOp(Start stdexten)
;exten => _+X.,n,Set(LOCAL(ext)=${EXTEN})
;exten => _+X.,n,Set(LOCAL(dev)=${ARG1})
;exten => _+X.,n,Set(LOCAL(cntx)=${ARG2})
;;exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
;exten => _+X.,n,Dial(${dev},40)                         ; Ring the interface, 20 seconds maximum
;exten => _+X.,n,Goto(stdexten-${DIALSTATUS},1)          ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)
;
;
;exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)        ; If unavailable, send to voicemail w/ unavail announce
;exten => stdexten-NOANSWER,n,Return()                   ; If they press #, return to start
;
;exten => stdexten-BUSY,1,VoiceMail(${mbx},b)            ; If busy, send to voicemail w/ busy announce
;exten => stdexten-BUSY,n,Return()                       ; If they press #, return to start
;
;exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)    ; Treat anything else as no answer
;
;exten => a,1,VoiceMailMain(${mbx})                      ; If they press *, send the user into VoicemailMain
;exten => a,n,Return()

; Dial-Users handles calls to internal extensions.
; Calls coming into this context may be *external* or *internal* in origin.
;[DialUsers]
;exten = _[+0-9].,1,Verbose(1, "DialUser ${CALLERID(num)} dialed ${EXTEN}.")
; same = n,Set(LOCAL(ext)=${EXTEN})
; same = n,Set(LOCAL(dev)=${ARG1})
; same = n,Set(LOCAL(cntx)=${ARG2})
; same = n,Dial(${dev}${INTERNAL_DIAL_OPT})
; same = n,Goto(dialed-${DIALSTATUS},1)
;
;exten = dialed-NOANSWER,1,NoOp(STATUS: NOANSWER)
; same = n,Return()
;
;exten = dialed-BUSY,1,NoOp(STATUS: BUSY)
; same = n,Return()
;
;exten = dialed-CHANUNAVAIL,1,NoOp(STATUS: CHANUNAVAIL)
; same = n,Return()
;
;exten = _dialed-.,1,NoOp(Dialed other ${DIALSTATUS})
; same = n,Goto(dialed-NOANSWER,1)

[Handlers]
exten => Dialer,1,NoOp(Handler:Dialer ${ARG1} ${ARG2})
; same => n,GotoIf($[${LEN(${BLINDTRANSFER})} = 0]?here)
; same => n,NoOp(BLINDTRANSFER=${BLINDTRANSFER})
; same => n,Set(STATION=${CUT(BLINDTRANSFER,,-1):4})
; same => n,NoOp(STATION=${STATION})
;same => n,SIPAddHeader(Diversion:  <sip:${STATION}@10.0.0.98>\;privacy=off\;reason=unconditional)
 same => n(here),Dial(PJSIP/${ARG1}@SBC${CURRENTSBC},,wW)
 same => n,Return()

exten => RRNDialer,1,NoOp(Handler:RRNDialer ${ARG1} ${ARG2})
 same => n,NoOp(Dial SBC${CURRENTSBC} TEST of Round Robin)
 same => n,Set(GLOBAL(CURRENTSBC)=${IF($[${CURRENTSBC} >= ${MAXSBC}]?1:$[${CURRENTSBC}+1])})
 same => n(here),Dial(PJSIP/${ARG1}@SBC${CURRENTSBC},,wW)
 same => n,Return()

exten => LBDialer,1,NoOp(Handler:LBDialer ${ARG1} ${ARG2})
 same => n,Set(SBCS=3) ; Number of SBCS, all in Endpoints names SBCx
 same => n,Set(INDEX=1)
 same => n,Set(RANDOM=${RAND(0,$[${SBCS} - 1])})
 same => n(CALL),NoOP(Attempt Call)
 same => n,Set(TARGET=SBC$[(${INDEX} + ${RANDOM})%(${SBCS}) + 1])
 same => n,Dial(PJSIP/${ARG1}@${TARGET},${ARG2},${ARG3},${ARG4})
 same => n,GotoIf($[${INDEX} >= ${SBCS}]?END:)
 same => n,Set(INDEX=$[${INDEX}+1])
 same => n,GotoIf($["${DIALSTATUS}" = "CHANUNAVAIL"]?CALL:)
 same => n,GotoIf($["${DIALSTATUS}" = "CONGESTION"]?CALL:)
 same => n(END),NoOP(End of Macro:LBDial)
 same => n,Return()
; SBCS= # of SBCs
; index = RND between 1 - SBCs
; stop  = index + SBCs - 1
; Call via Index
; if success goto end
; if index = stop goto end
; index = index + 1
; Goto call
;
exten = SIPExten,1,Verbose(1, "DialUser ${CALLERID(num)} dialed ${ARG1} ${ARG2} ${ARG3}.")
 same = n,Set(LOCAL(ext)=${ARG1})
 same = n,Set(LOCAL(dev)=${ARG2})
 same = n,Set(LOCAL(cntx)=${ARG3})
 same = n,Dial(${dev}${INTERNAL_DIAL_OPT})
 same = n,Goto(dialed-${DIALSTATUS},1)

exten = dialed-NOANSWER,1,NoOp(STATUS: NOANSWER)
 same = n,Return()

exten = dialed-BUSY,1,NoOp(STATUS: BUSY)
 same = n,Return()

exten = dialed-CHANUNAVAIL,1,NoOp(STATUS: CHANUNAVAIL)
 same = n,Return()

exten = _dialed-.,1,NoOp(Dialed other ${DIALSTATUS})
 same = n,Goto(dialed-NOANSWER,1)


; Add Header to the Outbound Call
exten => addHeaders,1,NoOp(Set Both Diversion[${ARG1}] Paid[${ARG2}] using Domain [${ARG3}])
 same => n,NoOP(PASS BY ARGUMENT ${ARG1} ${ARG2} ${ARG3})

 ; Future set the Domain if provided. Need to tes tthis line first.
 ;same => n,Set(MyDOM=IF($["${ARG3}" = ""]?${DOM1}:${ARG3}))

 same => n,GotoIf($["${ARG1}" = ""]?skipDiversion)}
 same => n,set(PJSIP_HEADER(add,Diversion)=<sip:${ARG1}@${DOM1}>);\;privacy=off\;reason=unconditional)
 same => n(skipDiversion),NoOp()

 same => n,GotoIf($["${ARG2}" = ""]?skipPAID)}
 same => n,Set(PJSIP_HEADER(add,P-Asserted-Identity)=<sip:${ARG2}@${DOM1}>)
 same => n(skipPAID),NoOp()

 same => n,NoOp(CALLID = ${CHANNEL(pjsip,call-id)})
 same => n,Set(CDR(callid)=${CHANNEL(pjsip,call-id)})
 same => n,return()


; Macro to make outbound call with a variety of SIP headers
exten =>TestOut,1,NoOp(TestOut ([${ARG1}],[${ARG2}],[${ARG3}],[${ARG4}],[${ARG5}],[${ARG6}]))
 same => n,Set(ARRAY(Title,To,From,Diversion,PAID,EBI)=${ARG1},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6})
 same => n,NoOp(TestOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}]))

 ; Set Title
 same => n,Set(Title=${IF($[ "${Title}" = ""]?#:${Title})})
 same => n,Set(Title=${IF($[ "${Title}" = "#"]?ECN Test(${EXTEN}):${Title})})
 same => n,Set(Caller=${CALLERID(name)})
 same => n,set(CALLERID(name)=${Title}-${Caller})
 same => n,set(CALLERID(num)=${From})

 ; Set correct EBI source, default to LLD
 same => n,Set(EBI=${IF($[ "${EBI}" = ""]?LLD:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LLD]?SBC1:${EBI})})
 same => n,Set(EBI=${IF($[ ${EBI} = LDO]?SBC1:${EBI})})

 ; Make Call
 same => n,NoOp(TestOut ([${Title}],[${To}],[${From}],[${Diversion}],[${PAID}],[${EBI}]))
 same => n,Dial(PJSIP/${To}@${EBI},,b(Handlers^addHeaders^1(${Diversion},${PAID})))

[catch-all]
exten => _[+0-9].,1,Answer()
 same => n,Progress()
 same => n,Wait(1)
 same => n,Playback(custom/hal-sorry-dave)
; same => n,Playback(hello-world)
 same => n,Wait(1)
 same => n,Echo()
 same => n,Wait(1)
 same => n,Hangup()

[TestLaunch]
;If inbound to the test Launchpad
exten => +351217009017,1,NoOp(Inbound Test selection)
 same => n,Ringing()
 same => n,Answer
 same => n,Wait(1)

 ;Validate Caller
 same => n,NoOp(CALLERID(num) = ${CALLERID(num)})
 same => n,GotoIf($["${CALLERID(num)}" = "+16123066440"]?validCaller)}; David Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+17038526073"]?validCaller)}; Kristie Desk
 same => n,GotoIf($["${CALLERID(num)}" = "+16012590380"]?validCaller)}; Kristie Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+17038526073"]?validCaller)}; Chris Desk
 same => n,GotoIf($["${CALLERID(num)}" = "+19192088695"]?validCaller)}; Chris Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+17038879441"]?validCaller)}; Sanjay Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+17038879441"]?validCaller)}; Sanjay Cell
 same => n,GotoIf($["${CALLERID(num)}" = "+33170737822"]?validCaller)}; Francoise Desk
 same => n,GotoIf($["${CALLERID(num)}" = "+33621765116"]?validCaller)}; Francoise Mobile
 same => n,GotoIf($["${CALLERID(num)}" = "+33685928708"]?validCaller)}; Francoise Mobile 2
 same => n,GotoIf($["2" = "1"]?validCaller)}
 same => n,Playback(beeperr)
 same => n,Playback(beeperr)
 same => n,Read(MyDigits,,0,n,,60)
 same => n,NoOp(Reciecved Mydigits = ${MyDigits})
 same => n,GotoIf($["${MyDigits}" = "9459"]?validCaller)}
 same => n,Playback(beeperr)
 same => n,Playback(beeperr)
 same => n,hangup()

 same => n(validCaller),NoOp(Valid Caller)
 same => n,Playback(beep)
 same => n,Read(MyDigits,,0,n,,60)
 same => n,SayAlpha(${MyDigits})
 same => n,GoSub(TestCases,${MyDigits},1)
 same => n,hangup()

[from-verizon]
include => TestLaunch
include => sip-phones
include => catch-all

[from-other]
include => sip-phones
include => catch-all

[outbound]
include => Handlers

exten => 88,1,NoOp( 88 Catch all)
 same => n,Gosub(catch-all,88,1)
 same => n,Congestion

exten => _XXXX,1,NoOp(Dialed four digit extention)
 same => n,Dial(PJSIP/${EXTEN}@OTHER)
 same => n,Congestion

;; Send anything we have to Verizon  all patterns
exten => _[+0-9].,1,NoOP(Outbound all patterns ${EXTEN})
 same => n,GoSub(Handlers,RRNDialer,1,(${EXTEN}))
 same => n,Congestion

;; E.164 Digit Dialing
;exten => _+1NXXNXXXXXX,1,NoOp(Outbound E.164 Pattern)
; same => n,Set(CALLERID(all)= "ATG ALCID Test" <6123066440>)
; same => n,Dial(PJSIP/${EXTEN}@CAEntLvl-CanadaEBI1,,b(handler^addheader^1))
; same => n,Congestion

;; Dialing 911
;exten => 911,1,NoOp(Outbound 911)
;; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;; N11 Digit Dialing NOT 911
;exten => _[2345678]11,1,NoOp(Outbound N11 Pattern WITHOUT 911)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;exten => 0,1,NoOP(Outbound Operator 0)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
;exten => 00,1,NoOP(Outbound Operator 00)
; same => n,Dial(PJSIP/${EXTEN}@USCAEL-EBI2)
; same => n,Congestion
;
[from-phone]
include => TestLaunch
;include => sip-phones
include => TestCases
include => outbound
include => catch-all

[TestCases]
; Title,To,From,Diversion,PAID,EBI

;France
exten => 100,1,GoSub(Handlers,TestOut,1,(100,0130453667,+33172280009,,,LLD))
exten => 101,1,GoSub(Handlers,TestOut,1,(101,0486060215,+33172280009,,,LLD))
exten => 102,1,GoSub(Handlers,TestOut,1,(102,0474212295,+33172280009,,,LLD))
exten => 103,1,GoSub(Handlers,TestOut,1,(103,0621765116,+33172280009,,,LLD))
exten => 104,1,GoSub(Handlers,TestOut,1,(104,004969972686189,+33172280009,,,LLD))
exten => 105,1,GoSub(Handlers,TestOut,1,(105,00441133012155,+33172280009,,,LLD))
exten => 106,1,GoSub(Handlers,TestOut,1,(106,00496922221991,+33172280009,,,LLD))
exten => 107,1,GoSub(Handlers,TestOut,1,(107,00447801135108,+33172280009,,,LLD))
exten => 108,1,GoSub(Handlers,TestOut,1,(108,112,+33172280009,,,LLD))
exten => 109,1,GoSub(Handlers,TestOut,1,(109,118218,+33172280009,,,LLD))
exten => 110,1,GoSub(Handlers,TestOut,1,(110,0805100929,+33172280009,,,LLD))

exten => 112,1,GoSub(Handlers,TestOut,1,(112,0810821821,+33172280009,,,LLD))
exten => 113,1,GoSub(Handlers,TestOut,1,(113,080017777777,+33172280009,,,LLD))
exten => 114,1,GoSub(Handlers,TestOut,1,(114,018668449390,+33172280009,,,LLD))
exten => 115,1,GoSub(Handlers,TestOut,1,(115,004990055102030,+33172280009,,,LLD))
exten => 116,1,GoSub(Handlers,TestOut,1,(116,00491802222222,+33172280009,,,LLD))

;Germany
exten => 201,1,GoSub(Handlers,TestOut,1,(201,069972686189,+496922229925,,,LLD))
exten => 202,1,GoSub(Handlers,TestOut,1,(202,01716762726,+496922229925,,,LLD))
exten => 203,1,GoSub(Handlers,TestOut,1,(203,0033170737822,+496922229925,,,LLD))
exten => 204,1,GoSub(Handlers,TestOut,1,(204,0033130453667,+496922229925,,,LLD))
exten => 205,1,GoSub(Handlers,TestOut,1,(205,0033170737773,+496922229925,,,LLD))
exten => 206,1,GoSub(Handlers,TestOut,1,(206,0033621765116,+496922229925,,,LLD))
exten => 207,1,GoSub(Handlers,TestOut,1,(207,112,+496922229925,,,LLD))
exten => 208,1,GoSub(Handlers,TestOut,1,(208,11833,+496922229925,,,LLD))
exten => 209,1,GoSub(Handlers,TestOut,1,(209,08007548548,+496922229925,,,LLD))
exten => 210,1,GoSub(Handlers,TestOut,1,(210,080017777777,+496922229925,,,LLD))
exten => 211,1,GoSub(Handlers,TestOut,1,(211,018668449390,+496922229925,,,LLD))
exten => 212,1,GoSub(Handlers,TestOut,1,(212,004990055102030,+496922229925,,,LLD))
exten => 213,1,GoSub(Handlers,TestOut,1,(213,00491802222222,+496922229925,,,LLD))
exten => 214,1,GoSub(Handlers,TestOut,1,(214,11833,+496922229925,,,LLD))
exten => 215,1,GoSub(Handlers,TestOut,1,(215,11880,+496922229925,,,LLD))

;Italy
exten => 300,1,GoSub(Handlers,TestOut,1,(300,0236001431,+390236004898,,,LLD))
exten => 301,1,GoSub(Handlers,TestOut,1,(301,3482544880,+390236004898,,,LLD))
exten => 302,1,GoSub(Handlers,TestOut,1,(302,004969972686189,+390236004898,,,LLD))
exten => 303,1,GoSub(Handlers,TestOut,1,(303,00496922221991,+390236004898,,,LLD))
exten => 304,1,GoSub(Handlers,TestOut,1,(304,0033130453667,+390236004898,,,LLD))
exten => 305,1,GoSub(Handlers,TestOut,1,(305,0033621765116,+390236004898,,,LLD))
exten => 306,1,GoSub(Handlers,TestOut,1,(306,112,+390236004898,,,LLD))

exten => 308,1,GoSub(Handlers,TestOut,1,(308,0800986340,+390236004898,,,LLD))

exten => 310,1,GoSub(Handlers,TestOut,1,(310,080017777777,+390236004898,,,LLD))
exten => 311,1,GoSub(Handlers,TestOut,1,(311,018668449390,+390236004898,,,LLD))
exten => 312,1,GoSub(Handlers,TestOut,1,(312,004990055102030,+390236004898,,,LLD))
exten => 313,1,GoSub(Handlers,TestOut,1,(313,00491802222222,+390236004898,,,LLD))

;Spain
exten => 400,1,GoSub(Handlers,TestOut,1,(400,936367219,+34914140094,,,LLD))
exten => 401,1,GoSub(Handlers,TestOut,1,(401,606019526,+34914140094,,,LLD))
exten => 402,1,GoSub(Handlers,TestOut,1,(402,004969972686189,+34914140094,,,LLD))
exten => 403,1,GoSub(Handlers,TestOut,1,(403,00496922221991,+34914140094,,,LLD))
exten => 404,1,GoSub(Handlers,TestOut,1,(404,0033130453667,+34914140094,,,LLD))
exten => 405,1,GoSub(Handlers,TestOut,1,(405,0033621765116,+34914140094,,,LLD))
exten => 406,1,GoSub(Handlers,TestOut,1,(406,016,+34914140094,,,LLD))
exten => 407,1,GoSub(Handlers,TestOut,1,(407,11818,+34914140094,,,LLD))
exten => 408,1,GoSub(Handlers,TestOut,1,(408,0800098265,+34914140094,,,LLD))

exten => 410,1,GoSub(Handlers,TestOut,1,(410,080017777777,+34914140094,,,LLD))
exten => 411,1,GoSub(Handlers,TestOut,1,(411,018668449390,+34914140094,,,LLD))
exten => 412,1,GoSub(Handlers,TestOut,1,(412,004990055102030,+34914140094,,,LLD))
exten => 413,1,GoSub(Handlers,TestOut,1,(413,00491802222222,+34914140094,,,LLD))

;Sweden
exten => 500,1,GoSub(Handlers,TestOut,1,(500,0856617075,+46850338992,,,LLD))
exten => 501,1,GoSub(Handlers,TestOut,1,(501,0733112075,+46850338992,,,LLD))
exten => 502,1,GoSub(Handlers,TestOut,1,(502,004969972686189,+46850338992,,,LLD))
exten => 503,1,GoSub(Handlers,TestOut,1,(503,00496922221991,+46850338992,,,LLD))
exten => 504,1,GoSub(Handlers,TestOut,1,(504,0033130453667,+46850338992,,,LLD))
exten => 505,1,GoSub(Handlers,TestOut,1,(505,0033621765116,+46850338992,,,LLD))
exten => 506,1,GoSub(Handlers,TestOut,1,(506,112,+46850338992,,,LLD))

exten => 508,1,GoSub(Handlers,TestOut,1,(508,0200898761,+46850338992,,,LLD))

exten => 510,1,GoSub(Handlers,TestOut,1,(510,080017777777,+46850338992,,,LLD))
exten => 511,1,GoSub(Handlers,TestOut,1,(511,018668449390,+46850338992,,,LLD))
exten => 512,1,GoSub(Handlers,TestOut,1,(512,004990055102030,+46850338992,,,LLD))
exten => 513,1,GoSub(Handlers,TestOut,1,(513,00491802222222,+46850338992,,,LLD))
exten => 514,1,GoSub(Handlers,TestOut,1,(514,118118,+46850338992,,,LLD))
exten => 515,1,GoSub(Handlers,TestOut,1,(515,118800,+46850338992,,,LLD))

;Norway
exten => 600,1,GoSub(Handlers,TestOut,1,(600,24130542 ,+4721016980,,,LLD))
exten => 601,1,GoSub(Handlers,TestOut,1,(601,95124539,+4721016980,,,LLD))
exten => 602,1,GoSub(Handlers,TestOut,1,(602,004969972686189,+4721016980,,,LLD))
exten => 603,1,GoSub(Handlers,TestOut,1,(603,00496922221991,+4721016980,,,LLD))
exten => 604,1,GoSub(Handlers,TestOut,1,(604,0033130453667,+4721016980,,,LLD))
exten => 605,1,GoSub(Handlers,TestOut,1,(605,0033621765116,+4721016980,,,LLD))
exten => 606,1,GoSub(Handlers,TestOut,1,(606,112,+4721016980,,,LLD))

exten => 608,1,GoSub(Handlers,TestOut,1,(608,80018166,+4721016980,,,LLD))

exten => 610,1,GoSub(Handlers,TestOut,1,(610,080017777777,+4721016980,,,LLD))
exten => 611,1,GoSub(Handlers,TestOut,1,(611,018668449390,+4721016980,,,LLD))
exten => 612,1,GoSub(Handlers,TestOut,1,(612,004990055102030,+4721016980,,,LLD))
exten => 613,1,GoSub(Handlers,TestOut,1,(613,00491802222222,+4721016980,,,LLD))

;Switzerland
exten => 700,1,GoSub(Handlers,TestOut,1,(700,0445808454,+41445889627,,,LLD))
exten => 701,1,GoSub(Handlers,TestOut,1,(701,0796386746,+41445889627,,,LLD))
exten => 702,1,GoSub(Handlers,TestOut,1,(702,004969972686189,+41445889627,,,LLD))
exten => 703,1,GoSub(Handlers,TestOut,1,(703,00496922221991,+41445889627,,,LLD))
exten => 704,1,GoSub(Handlers,TestOut,1,(704,0033130453667,+41445889627,,,LLD))
exten => 705,1,GoSub(Handlers,TestOut,1,(705,0033621765116,+41445889627,,,LLD))
exten => 706,1,GoSub(Handlers,TestOut,1,(706,112,+41445889627,,,LLD))

exten => 708,1,GoSub(Handlers,TestOut,1,(708,0800001408,+41445889627,,,LLD))

exten => 710,1,GoSub(Handlers,TestOut,1,(710,080017777777,+41445889627,,,LLD))
exten => 711,1,GoSub(Handlers,TestOut,1,(711,018668449390,+41445889627,,,LLD))
exten => 712,1,GoSub(Handlers,TestOut,1,(712,004990055102030,+41445889627,,,LLD))
exten => 713,1,GoSub(Handlers,TestOut,1,(713,00491802222222,+41445889627,,,LLD))
exten => 714,1,GoSub(Handlers,TestOut,1,(714,1811,+41445889627,,,LLD))
exten => 715,1,GoSub(Handlers,TestOut,1,(715,0900000340,+41445889627,,,LLD))
exten => 716,1,GoSub(Handlers,TestOut,1,(716,0848888888,+41445889627,,,LLD))
i
exten => 720,1,GoSub(Handlers,TestOut,1,(720,1410,+41445889627,,,LLD))
exten => 721,1,GoSub(Handlers,TestOut,1,(721,1411,+41445889627,,,LLD))


;Netherlands
exten => 900,1,GoSub(Handlers,TestOut,1,(900,0715311451,+31207105896,,,LLD))
exten => 901,1,GoSub(Handlers,TestOut,1,(901,0655787087,+31207105896,,,LLD))
exten => 902,1,GoSub(Handlers,TestOut,1,(902,004969972686189,+31207105896,,,LLD))
exten => 903,1,GoSub(Handlers,TestOut,1,(903,00496922221991,+31207105896,,,LLD))
exten => 904,1,GoSub(Handlers,TestOut,1,(904,0033130453667,+31207105896,,,LLD))
exten => 905,1,GoSub(Handlers,TestOut,1,(905,0033621765116,+31207105896,,,LLD))
exten => 906,1,GoSub(Handlers,TestOut,1,(906,112,+31207105896,,,LLD))

exten => 908,1,GoSub(Handlers,TestOut,1,(908,08000200414,+31207105896,,,LLD))

exten => 910,1,GoSub(Handlers,TestOut,1,(910,080017777777,+31207105896,,,LLD))
exten => 911,1,GoSub(Handlers,TestOut,1,(911,018668449390,+31207105896,,,LLD))
exten => 912,1,GoSub(Handlers,TestOut,1,(912,004990055102030,+31207105896,,,LLD))
exten => 913,1,GoSub(Handlers,TestOut,1,(913,00491802222222,+31207105896,,,LLD))

;Austria
exten => 1001,1,GoSub(Handlers,TestOut,1,(1001,01727148682,+431253583600,,,LLD))
exten => 1002,1,GoSub(Handlers,TestOut,1,(1002,073269401,+431253583600,,,LLD))
exten => 1003,1,GoSub(Handlers,TestOut,1,(1003,050110111,+431253583600,,,LLD))
exten => 1004,1,GoSub(Handlers,TestOut,1,(1004,069917278682,+431253583600,,,LLD))
exten => 1005,1,GoSub(Handlers,TestOut,1,(1005,0033130453667,+431253583600,,,LLD))
exten => 1006,1,GoSub(Handlers,TestOut,1,(1006,00496922221991,+431253583600,,,LLD))
exten => 1007,1,GoSub(Handlers,TestOut,1,(1007,0033621765116,+431253583600,,,LLD))
exten => 1008,1,GoSub(Handlers,TestOut,1,(1008,118811,+431253583600,,,LLD))
exten => 1009,1,GoSub(Handlers,TestOut,1,(1009,118888,+431253583600,,,LLD))
exten => 1010,1,GoSub(Handlers,TestOut,1,(1010,0800677828,+431253583600,,,LLD))
exten => 1011,1,GoSub(Handlers,TestOut,1,(1011,082040001503,+431253583600,,,LLD))
exten => 1012,1,GoSub(Handlers,TestOut,1,(1012,0900210240,+431253583600,,,LLD))
exten => 1013,1,GoSub(Handlers,TestOut,1,(1013,0080044148400,+431253583600,,,LLD))
exten => 1014,1,GoSub(Handlers,TestOut,1,(1014,0018668449390,+431253583600,,,LLD))
exten => 1015,1,GoSub(Handlers,TestOut,1,(1015,00491802222222,+431253583600,,,LLD))

;Czech Republic
exten => 1100,1,GoSub(Handlers,TestOut,1,(1100,221180858,+420296182530,,,LLD))
exten => 1101,1,GoSub(Handlers,TestOut,1,(1101,595606600,+420296182530,,,LLD))
exten => 1102,1,GoSub(Handlers,TestOut,1,(1102,605938344,+420296182530,,,LLD))
exten => 1103,1,GoSub(Handlers,TestOut,1,(1103,0033130453667,+420296182530,,,LLD))
exten => 1104,1,GoSub(Handlers,TestOut,1,(1104,00496922221991,+420296182530,,,LLD))
exten => 1105,1,GoSub(Handlers,TestOut,1,(1105,0033621765116,+420296182530,,,LLD))
exten => 1106,1,GoSub(Handlers,TestOut,1,(1106,1188,+420296182530,,,LLD))
exten => 1107,1,GoSub(Handlers,TestOut,1,(1107,800700201,+420296182530,,,LLD))
exten => 1108,1,GoSub(Handlers,TestOut,1,(1108,844844822,+420296182530,,,LLD))
exten => 1109,1,GoSub(Handlers,TestOut,1,(1109,972524235,+420296182530,,,LLD))
exten => 1110,1,GoSub(Handlers,TestOut,1,(1110,0080043215432,+420296182530,,,LLD))
exten => 1111,1,GoSub(Handlers,TestOut,1,(1111,80011031121,+420296182530,,,LLD))
exten => 1112,1,GoSub(Handlers,TestOut,1,(1112,0018668449390,+420296182530,,,LLD))
exten => 1113,1,GoSub(Handlers,TestOut,1,(1113,00611800674790,+420296182530,,,LLD))
exten => 1114,1,GoSub(Handlers,TestOut,1,(1114,00491802222222,+420296182530,,,LLD))

; Belgium
exten => 1200,1,GoSub(Handlers,TestOut,1,(1200,027211948,+3224001360,,,LLD))
exten => 1201,1,GoSub(Handlers,TestOut,1,(1201,0496598326,+3224001360,,,LLD))
exten => 1202,1,GoSub(Handlers,TestOut,1,(1202,026200426,+3224001360,,,LLD))
exten => 1203,1,GoSub(Handlers,TestOut,1,(1203,0033130453667,+3224001360,,,LLD))
exten => 1204,1,GoSub(Handlers,TestOut,1,(1204,00496922221991,+3224001360,,,LLD))
exten => 1205,1,GoSub(Handlers,TestOut,1,(1205,0033621765116,+3224001360,,,LLD))
exten => 1206,1,GoSub(Handlers,TestOut,1,(1206,1307,+3224001360,,,LLD))
exten => 1207,1,GoSub(Handlers,TestOut,1,(1207,1207,+3224001360,,,LLD))
exten => 1208,1,GoSub(Handlers,TestOut,1,(1208,0800677828,+3224001360,,,LLD))
exten => 1209,1,GoSub(Handlers,TestOut,1,(1209,0080044148400,+3224001360,,,LLD))
exten => 1210,1,GoSub(Handlers,TestOut,1,(1210,0018668449390,+3224001360,,,LLD))
exten => 1211,1,GoSub(Handlers,TestOut,1,(1211,00491802222222,+3224001360,,,LLD))
; Denmark
exten => 1300,1,GoSub(Handlers,TestOut,1,(1300,043869000,+4588742077,,,LLD))
exten => 1301,1,GoSub(Handlers,TestOut,1,(1301,088776655,+4588742077,,,LLD))
exten => 1302,1,GoSub(Handlers,TestOut,1,(1302,28109940,+4588742077,,,LLD))
exten => 1303,1,GoSub(Handlers,TestOut,1,(1303,0033130453667,+4588742077,,,LLD))
exten => 1304,1,GoSub(Handlers,TestOut,1,(1304,00496922221991,+4588742077,,,LLD))
exten => 1305,1,GoSub(Handlers,TestOut,1,(1305,0033621765116,+4588742077,,,LLD))
exten => 1306,1,GoSub(Handlers,TestOut,1,(1306,118,+4588742077,,,LLD))
exten => 1307,1,GoSub(Handlers,TestOut,1,(1307,80885388,+4588742077,,,LLD))
exten => 1308,1,GoSub(Handlers,TestOut,1,(1308,0080011031121,+4588742077,,,LLD))
exten => 1309,1,GoSub(Handlers,TestOut,1,(1309,0018668449390,+4588742077,,,LLD))
exten => 1310,1,GoSub(Handlers,TestOut,1,(1310,004990055102030,+4588742077,,,LLD))
exten => 1311,1,GoSub(Handlers,TestOut,1,(1311,00491802222222,+4588742077,,,LLD))
; Finland
exten => 1400,1,GoSub(Handlers,TestOut,1,(1400,0207764615,+358931584954,,,LLD))
exten => 1401,1,GoSub(Handlers,TestOut,1,(1401,0207764615,+358931584954,,,LLD))
exten => 1402,1,GoSub(Handlers,TestOut,1,(1402,0954255000,+358931584954,,,LLD))
exten => 1403,1,GoSub(Handlers,TestOut,1,(1403,0300870929,+358931584954,,,LLD))
exten => 1404,1,GoSub(Handlers,TestOut,1,(1404,0503760493,+358931584954,,,LLD))
exten => 1405,1,GoSub(Handlers,TestOut,1,(1405,0503760493,+358931584954,,,LLD))
exten => 1406,1,GoSub(Handlers,TestOut,1,(1406,0033130453667,+358931584954,,,LLD))
exten => 1407,1,GoSub(Handlers,TestOut,1,(1407,00496922221991,+358931584954,,,LLD))
exten => 1408,1,GoSub(Handlers,TestOut,1,(1408,0033621765116,+358931584954,,,LLD))
exten => 1409,1,GoSub(Handlers,TestOut,1,(1409,118,+358931584954,,,LLD))
exten => 1410,1,GoSub(Handlers,TestOut,1,(1410,0800520071,+358931584954,,,LLD))
exten => 1411,1,GoSub(Handlers,TestOut,1,(1411,0080011031121,+358931584954,,,LLD))
exten => 1412,1,GoSub(Handlers,TestOut,1,(1412,0018668449390,+358931584954,,,LLD))
exten => 1413,1,GoSub(Handlers,TestOut,1,(1413,004990055102030,+358931584954,,,LLD))
exten => 1414,1,GoSub(Handlers,TestOut,1,(1414,00491802222222,+358931584954,,,LLD))
; Norway
exten => 1500,1,GoSub(Handlers,TestOut,1,(1500,24130400,+,,,LLD))
exten => 1501,1,GoSub(Handlers,TestOut,1,(1501,24130400,+,,,LLD))
exten => 1502,1,GoSub(Handlers,TestOut,1,(1502,22400100,+,,,LLD))
exten => 1503,1,GoSub(Handlers,TestOut,1,(1503,32217000,+,,,LLD))
exten => 1504,1,GoSub(Handlers,TestOut,1,(1504,99283499,+,,,LLD))
exten => 1505,1,GoSub(Handlers,TestOut,1,(1505,99283499,+,,,LLD))
exten => 1506,1,GoSub(Handlers,TestOut,1,(1506,0033130453667,+,,,LLD))
exten => 1507,1,GoSub(Handlers,TestOut,1,(1507,00496922221991,+,,,LLD))
exten => 1508,1,GoSub(Handlers,TestOut,1,(1508,0033621765116,+,,,LLD))
exten => 1509,1,GoSub(Handlers,TestOut,1,(1509,1881,+,,,LLD))
exten => 1510,1,GoSub(Handlers,TestOut,1,(1510,80018166,+,,,LLD))
exten => 1511,1,GoSub(Handlers,TestOut,1,(1511,81077000,+,,,LLD))
exten => 1512,1,GoSub(Handlers,TestOut,1,(1512,0080011031121,+,,,LLD))
exten => 1513,1,GoSub(Handlers,TestOut,1,(1513,0018668449390,+,,,LLD))
exten => 1514,1,GoSub(Handlers,TestOut,1,(1514,004990055102030,+,,,LLD))
exten => 1515,1,GoSub(Handlers,TestOut,1,(1515,00491802222222,+,,,LLD))
; Slovakia
exten => 1600,1,GoSub(Handlers,TestOut,1,(1600,0220461427,+421232600422,,,LLD))
exten => 1601,1,GoSub(Handlers,TestOut,1,(1601,0248245111,+421232600422,,,LLD))
exten => 1602,1,GoSub(Handlers,TestOut,1,(1602,0445522721,+421232600422,,,LLD))
exten => 1603,1,GoSub(Handlers,TestOut,1,(1603,0911280968,+421232600422,,,LLD))
exten => 1604,1,GoSub(Handlers,TestOut,1,(1604,0033130453667,+421232600422,,,LLD))
exten => 1605,1,GoSub(Handlers,TestOut,1,(1605,00496922221991,+421232600422,,,LLD))
exten => 1606,1,GoSub(Handlers,TestOut,1,(1606,0033621765116,+421232600422,,,LLD))
exten => 1607,1,GoSub(Handlers,TestOut,1,(1607,0850111666,+421232600422,,,LLD))
exten => 1608,1,GoSub(Handlers,TestOut,1,(1608,12111,+421232600422,,,LLD))
exten => 1609,1,GoSub(Handlers,TestOut,1,(1609,0080011031121,+421232600422,,,LLD))
exten => 1610,1,GoSub(Handlers,TestOut,1,(1610,0018668449390,+421232600422,,,LLD))
exten => 1611,1,GoSub(Handlers,TestOut,1,(1611,004990055102030,+421232600422,,,LLD))
exten => 1612,1,GoSub(Handlers,TestOut,1,(1612,00491802222222,+421232600422,,,LLD))
; Romania
exten => 1700,1,GoSub(Handlers,TestOut,1,(1700,0213166,+40312265988,,,LLD))
exten => 1701,1,GoSub(Handlers,TestOut,1,(1701,0212240034,+40312265988,,,LLD))
exten => 1702,1,GoSub(Handlers,TestOut,1,(1702,0033130453667,+40312265988,,,LLD))
exten => 1703,1,GoSub(Handlers,TestOut,1,(1703,00496922221991,+40312265988,,,LLD))
exten => 1704,1,GoSub(Handlers,TestOut,1,(1704,0033621765116,+40312265988,,,LLD))
exten => 1705,1,GoSub(Handlers,TestOut,1,(1705,118932,+40312265988,,,LLD))
exten => 1706,1,GoSub(Handlers,TestOut,1,(1706,0800800929,+40312265988,,,LLD))
exten => 1707,1,GoSub(Handlers,TestOut,1,(1707,0080011031121,+40312265988,,,LLD))
exten => 1708,1,GoSub(Handlers,TestOut,1,(1708,0018668449390,+40312265988,,,LLD))
exten => 1709,1,GoSub(Handlers,TestOut,1,(1709,004990055102030,+40312265988,,,LLD))
exten => 1710,1,GoSub(Handlers,TestOut,1,(1710,00491802222222,+40312265988,,,LLD))
; Poland
exten => 1800,1,GoSub(Handlers,TestOut,1,(1800,222782762,+48221639900,,,LLD))
exten => 1801,1,GoSub(Handlers,TestOut,1,(1801,222576699,+48221639900,,,LLD))
exten => 1802,1,GoSub(Handlers,TestOut,1,(1802,422082000,+48221639900,,,LLD))
exten => 1803,1,GoSub(Handlers,TestOut,1,(1803,0033130453667,+48221639900,,,LLD))
exten => 1804,1,GoSub(Handlers,TestOut,1,(1804,00496922221991,+48221639900,,,LLD))
exten => 1805,1,GoSub(Handlers,TestOut,1,(1805,0033621765116,+48221639900,,,LLD))
exten => 1806,1,GoSub(Handlers,TestOut,1,(1806,1307,+48221639900,,,LLD))
exten => 1807,1,GoSub(Handlers,TestOut,1,(1807,1207,+48221639900,,,LLD))
exten => 1808,1,GoSub(Handlers,TestOut,1,(1808,0800677828,+48221639900,,,LLD))
exten => 1809,1,GoSub(Handlers,TestOut,1,(1809,0080044148400,+48221639900,,,LLD))
exten => 1810,1,GoSub(Handlers,TestOut,1,(1810,0018668449390,+48221639900,,,LLD))
exten => 1811,1,GoSub(Handlers,TestOut,1,(1811,00491802222222,+48221639900,,,LLD))
; Luxembourg
exten => 1900,1,GoSub(Handlers,TestOut,1,(1900,27008033,+35227006254,,,LLD))
exten => 1950,1,GoSub(Handlers,TestOut,1,(1950,+35227008033,+35227006254,,,LLD))
exten => 1960,1,GoSub(Handlers,TestOut,1,(1960,+352027008033,+35227006254,,,LLD))
exten => 1901,1,GoSub(Handlers,TestOut,1,(1901,691191887,+35227006254,,,LLD))
exten => 1902,1,GoSub(Handlers,TestOut,1,(1902,691119012,+35227006254,,,LLD))
exten => 1903,1,GoSub(Handlers,TestOut,1,(1903,691191012,+35227006254,,,LLD))
exten => 1904,1,GoSub(Handlers,TestOut,1,(1904,0033130453667,+35227006254,,,LLD))
exten => 1905,1,GoSub(Handlers,TestOut,1,(1905,00496922221991,+35227006254,,,LLD))
exten => 1906,1,GoSub(Handlers,TestOut,1,(1906,0033621765116,+35227006254,,,LLD))
exten => 1907,1,GoSub(Handlers,TestOut,1,(1907,0800677828,+35227006254,,,LLD))
exten => 1908,1,GoSub(Handlers,TestOut,1,(1908,0080044148400,+35227006254,,,LLD))
exten => 1909,1,GoSub(Handlers,TestOut,1,(1909,0018668449390,+35227006254,,,LLD))
exten => 1910,1,GoSub(Handlers,TestOut,1,(1910,00491802222222,+35227006254,,,LLD))

[sip-phones]
;include => stdexten

;exten => 8888,1,GoSub(${EXTEN},stdexten(PJSIP/${EXTEN}))
exten => +351217009016,1,GoSub(Handlers,SIPExten,1,(${EXTEN},PJSIP/${EXTEN}))
exten => +351217009017,1,GoSub(Handlers,SIPExten,1,(${EXTEN},PJSIP/${EXTEN}))
exten => +4411845000034,1,GoSub(Handlers,SIPExten,1,(${EXTEN},PJSIP/${EXTEN}))
exten => +4411845000035,1,GoSub(Handlers,SIPExten,1,(${EXTEN},PJSIP/${EXTEN}))
